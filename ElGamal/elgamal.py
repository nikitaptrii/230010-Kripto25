# -*- coding: utf-8 -*-
"""elgamal.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fq-WKX_51NAQ_qJZRcGfbVpoKElnnib9
"""

# Nama : Nikita Putri Prabowo
# NPM : 140810230010
# Mata Kuliah : Praktikum Kriptografi

from dataclasses import dataclass
from typing import List, Tuple, Optional
import secrets

def ch2n(c: str) -> Optional[int]:
    c = c.upper()
    return ord(c) - 65 if "A" <= c <= "Z" else None

def n2ch(n: int) -> str:
    return chr((n % 26) + 65)

def modinv(a: int, m: int) -> int:
    a %= m
    r0, r1, s0, s1 = a, m, 1, 0
    while r1:
        q = r0 // r1
        r0, r1, s0, s1 = r1, r0 - q*r1, s1, s0 - q*s1
    if r0 != 1:
        raise ValueError("Tidak ada invers modulo (a dan m tidak koprima).")
    return s0 % m

@dataclass
class EGPub:
    p: int; g: int; y: int  # y = g^x mod p

@dataclass
class EGPriv:
    p: int; x: int

def elgamal_encrypt_text(text: str, pub: EGPub, k: Optional[int] = None) -> List[Tuple[int,int]]:
    """Enkripsi per huruf A..Z â†’ list pasangan (C1, C2).
       Non-huruf disimpan sebagai (-1, ord(char)) agar bisa dipulihkan."""
    p, g, y = pub.p, pub.g, pub.y
    if k is None:
        k = secrets.randbelow(p - 2) + 1
    c1 = pow(g, k, p)
    yk = pow(y, k, p)
    pairs: List[Tuple[int,int]] = []
    for ch in text.upper():
        n = ch2n(ch)
        if n is None:
            pairs.append((-1, ord(ch)))
        else:
            pairs.append((c1, (n * yk) % p))
    return pairs

def elgamal_decrypt_pairs(pairs: List[Tuple[int,int]], prv: EGPriv) -> str:
    p, x = prv.p, prv.x
    out = []
    for c1, c2 in pairs:
        if c1 == -1:
            out.append(chr(c2))
        else:
            s = pow(c1, x, p)
            m = (c2 * modinv(s, p)) % p
            out.append(n2ch(m))
    return "".join(out)

def parse_pairs(s: str) -> List[Tuple[int,int]]:
    """Format: '11:3,11:28,11:26' (non-huruf: '-1:32' untuk spasi)."""
    pairs = []
    s = s.strip()
    if not s:
        return pairs
    for item in s.split(","):
        a, b = item.strip().split(":")
        pairs.append((int(a), int(b)))
    return pairs

def main():
    while True:
        print("\n=== ELGAMAL ===")
        print("1) Encrypt (cukup PT + parameter)")
        print("2) Decrypt (cukup pairs + parameter)")
        print("0) Keluar")
        choice = input("Pilih: ").strip()

        try:
            if choice == "1":
                text = input("Plaintext (A-Z; non-huruf dipertahankan): ")
                mode = input("Gunakan default tugas [ENTER] atau kustom p,g,x[,k]? ").strip()
                if mode == "":
                    p, g, x, k = 37, 3, 2, 15  # default tugas
                else:
                    parts = [s.strip() for s in mode.replace(";", ",").split(",") if s.strip()]
                    if len(parts) == 3:
                        p, g, x = map(int, parts); k = None
                    elif len(parts) == 4:
                        p, g, x, k = map(int, parts)
                    else:
                        print("Format salah. Contoh: 37,3,2,15 atau 37,3,2"); continue
                y = pow(g, x, p)
                pairs = elgamal_encrypt_text(text, EGPub(p, g, y), k=k)
                print(f"Params: p={p}, g={g}, x={x}, y={y}, k={'acak' if k is None else k}")
                print("Pairs list :", pairs)
                print("Pairs CSV  :", ",".join(f"{c1}:{c2}" for c1, c2 in pairs))

            elif choice == "2":
                s = input("Masukkan pairs 'c1:c2' dipisah koma.\nContoh: 11:3,11:28,11:26\n> ")
                mode = input("Gunakan default tugas [ENTER] atau kustom p,x? ").strip()
                if mode == "":
                    p, x = 37, 2
                else:
                    parts = [s.strip() for s in mode.replace(";", ",").split(",") if s.strip()]
                    if len(parts) == 2:
                        p, x = map(int, parts)
                    else:
                        print("Format salah. Contoh: 37,2"); continue
                pairs = parse_pairs(s)
                print(f"Params: p={p}, x={x}")
                print("Plaintext:", elgamal_decrypt_pairs(pairs, EGPriv(p, x)))

            elif choice == "0":
                break
            else:
                print("Pilihan tidak dikenal.")
        except Exception as e:
            print("Error:", e)

if __name__ == "__main__":
    main()

